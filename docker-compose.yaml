services:
  # PostgreSQL для сервиса пациентов
  postgres_db:
    image: postgres:15
    container_name: patient_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      - my_network

  # Kafka (в режиме KRaft)
  kafka:
    user: root
    image: bitnami/kafka:3.8
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: "Zz3vWfNzQSCsOTrtFZVWXA"  # Пример UUID
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_KRAFT_METADATA_LOG_DIR: "/bitnami/kafka/data"
    volumes:
      - kafka_data:/bitnami/kafka/data
    restart: unless-stopped
    networks:
      - my_network

  # Сервис пациентов
  patient-service:
    image: patient-service:latest
    container_name: patient-service
    build:
      context: ./patientservice
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres_db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - my_network

  # Сервис FHIR API-интеграции
  fhir-service:
    image: fhir-service:latest
    container_name: fhir-service
    build:
      context: ./fhirservice
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      FHIR_SERVER_URL: http://hapi.fhir.org/baseR4
    depends_on:
      kafka:
        condition: service_started
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data: